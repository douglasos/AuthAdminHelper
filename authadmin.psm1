<# 
    Authentication Admin module
    Version: 0.1.0

    This is a module that implements functions that complement the currently implemented functionality
    for the Authentication Administrator role in Azure AD

    This is currently a beta level script and intended to be used as a demonstration script

    THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
    ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
    PARTICULAR PURPOSE.

    Author: kmasri@microsoft.com
    Copyright (c) Microsoft Corporation. All rights reserved.
#>

#requires -Version 5.1
#requires -Module MSOnline

Set-StrictMode -Version 'Latest'
$DebugMode = $false # DO NOT CHANGE THIS VALUE!

# RegEx to check if an UPN looks valid
$UPNRegEx = "(?i)^[A-Z0-9][A-Z0-9._%+-]{0,63}@(?:[A-Z0-9]+(?:-[A-Z0-9]+)*\.)+[A-Z]{2,63}$"

# Initialization code
$ErrorActionPreference = [System.Management.Automation.ActionPreference]::Stop

$ConnectedToMSOL = $false

# Colors to use for messages output
$ErrorColor   = [System.ConsoleColor]::Red
$WarningColor = [System.ConsoleColor]::Yellow
$VerboseColor = [System.ConsoleColor]::Green
$DebugColor   = [System.ConsoleColor]::Magenta
$DefaultColor = [System.ConsoleColor]::Cyan

# The aliases of the MFA methods used in AAD
enum MFAMethods
{
    TwoWayVoiceMobile          = 0   # Voice call to primary authentication phone
    TwoWayVoiceAlternateMobile = 1   # Voice call to alternate authentication phone
    TwoWayVoiceOffice          = 2   # Voice call to office phone
    OneWaySMS                  = 3   # One way SMS message with OTP
    PhoneAppOTP                = 4   # OTP generated by authenticator app
    PhoneAppNotification       = 5   # Push notification to authenticator app
}

function Out-Message
{
    [CmdletBinding()]

    param
    (
        [Parameter(Mandatory=$true)]
        [string]
        $Message,

        [Parameter(Mandatory=$false)]
        [System.ConsoleColor]
        $Color = $DefaultColor
    )

    Write-Host $Message -ForegroundColor $Color
}

function Out-Error
{
    [CmdletBinding()]

    param
    (
        [Parameter(Mandatory=$true)]
        [string]
        $Message
    )

    Out-Message -Message "ERROR: $Message" -Color $ErrorColor
}


function Out-Warning
{
    [CmdletBinding()]

    param
    (
        [Parameter(Mandatory=$true)]
        [string]
        $Message
    )

    Out-Message -Message "WARNING: $Message" -Color $WarningColor
}

function Connect-MSOL
{
    [CmdletBinding()]

    param
    (
        [Parameter()]
        [switch]
        $Force
    )

    if (($script:ConnectedToMSOL) -and (!$Force))
    {
        return $true
    }

    try
    {
        Connect-MsolService
    }
    catch
    {
        Out-Error "Unable to connect to MSOnline"
        return $false
    }

    $script:ConnectedToMSOL = $true
    
    return $true
}

function Get-MFAUser
{
    [CmdletBinding()]

    param
    (
        [Parameter(Mandatory=$true)]
        [Alias("UPN")]
        [string]
        $UserPrincipalName
    )

    
    if (($UserPrincipalName.Length -gt 254) -or ($UserPrincipalName -notmatch $UPNRegEx))
    {
        Out-Error "Invalid UPN"
        return $null
    }

    if (!(Connect-MSOL))
    {
        return $null
    }

    try
    {
        $User = Get-MsolUser -UserPrincipalName $UserPrincipalName
        if (!$User)
        {
            throw
        }
    }
    catch
    {
        Out-Error "Cannot find user with UPN $UserPrincipalName"
        return $null
    }

    return $User
}

function Reset-MFAUserAuthenticationMethods
{
    [CmdletBinding()]

    param
    (
        [Parameter(Mandatory=$true)]
        [Alias("UPN")]
        [string]
        $UserPrincipalName
    )

    $User = Get-MFAUser -UserPrincipalName $UserPrincipalName

    if ($null -eq $User)
    {
        return
    }

    # As of 01MAR19, Get-MSOLUser returns $null in StrongAuthenticationMethods if the
    # user running the cmdlet does not have permissions over the target object,
    # but returns an empty collection if the permission is granted but the collection is empty
    $Methods = $User.StrongAuthenticationMethods
    if ($null -eq $Methods)
    {
        Out-Error "You don't have permissions to reset MFA methods for $UserPrincipalName"
        return
    }

    if ($Methods.Count -eq 0)
    {
        Out-Message "No MFA authentication methods registered for $UserPrincipalName"
        return
    }

    # Reset the strong authentication methods for the user
    try
    {
        Set-MsolUser -UserPrincipalName $UserPrincipalName -StrongAuthenticationMethods @()
    }
    catch
    {
        Out-Error "Unable to reset authentication methods for $UserPrincipalName"
        return
    }

    Out-Message "MFA methods reset for user $UserPrincipalName"
}
Export-ModuleMember -Function 'Reset-MFAUserAuthenticationMethods'

function Set-MFAUserDefaultAuthenticationMethod
{
    [CmdletBinding()]

    param
    (
        [Parameter(Mandatory=$true)]
        [Alias("UPN")]
        [string]
        $UserPrincipalName,

        [Parameter(Mandatory=$true)]
        [MFAMethods]
        $Method
    )

    $User = Get-MFAUser -UserPrincipalName $UserPrincipalName

    if ($null -eq $User)
    {
        return
    }

    # As of 01MAR19, Get-MSOLUser returns $null in StrongAuthenticationMethods if the
    # user running the cmdlet does not have permissions over the target object,
    # but returns an empty collection if the permission is granted but the collection is empty
    $Methods = $User.StrongAuthenticationMethods
    if ($null -eq $Methods)
    {
        Out-Error "You don't have permissions to set MFA methods for $UserPrincipalName"
        return
    }

    if ($Methods.Count -eq 0)
    {
        Out-Message "No MFA authentication methods registered for $UserPrincipalName"
        return
    }
    
    $CurrentDefault = -1
    $NewDefault = -1

    for ($i = 0; $i -lt $Methods.Count; $i++)
    {
        if ($Methods[$i].IsDefault)
        {
            $CurrentDefault = $i
        }

        if ($Methods[$i].MethodType -eq $Method)
        {
            $NewDefault = $i
        }
    }

    if ($NewDefault -eq -1)
    {
        Out-Error "Method $Method is not registered for user $($User.UserPrincipalName)"
        return
    }

    if ($NewDefault -eq $CurrentDefault)
    {
        Out-Message "User $($User.UserPrincipalName) already has method $Method as the default"
        return
    }

    if ($CurrentDefault -ne -1)
    {
        $Methods[$CurrentDefault].IsDefault = $false
    }
    else
    {
        Out-Warning "User $UserPrincipalName has no current default authentication methods"
    }

    $Methods[$NewDefault].IsDefault = $true

    try
    {
        Set-MsolUser -UserPrincipalName $User.UserPrincipalName -StrongAuthenticationMethods $Methods
    }
    catch
    {
        Out-Error "Unable to set the default authentication method for $($User.UserPrincipalName)"
        return
    }

    Out-Message "Default authentication method for $($User.UserPrincipalName) set to $Method"
}
Export-ModuleMember -Function 'Set-MFAUserDefaultAuthenticationMethod'

function Get-MFAUserAuthenticationMethods
{
    [CmdletBinding()]

    param
    (
        [Parameter(Mandatory=$true)]
        [Alias("UPN")]
        [string]
        $UserPrincipalName
    )

    $User = Get-MFAUser -UserPrincipalName $UserPrincipalName

    if ($null -eq $User)
    {
        return
    }

    # As of 01MAR19, Get-MSOLUser returns $null in StrongAuthenticationMethods if the
    # user running the cmdlet does not have permissions over the target object,
    # but returns an empty collection if the permission is granted but the collection is empty
    $Methods = $User.StrongAuthenticationMethods
    if ($null -eq $Methods)
    {
        Out-Error "You don't have permissions to get MFA methods for $UserPrincipalName"
        return
    }

    if ($Methods.Count -eq 0)
    {
        Out-Warning "No MFA authentication methods are registered for $UserPrincipalName"
        return
    }

    if (@($Methods | Where-Object { $_.IsDefault }).Count -eq 0)
    {
        Out-Warning "User $($user.UserPrincipalName) has no default method"
    }

    $Methods | Select-Object -Property MethodType, IsDefault
}
Export-ModuleMember -Function 'Get-MFAUserAuthenticationMethods'

# Just a helper function to show the aliases of the MFA methods names
# to be used as parameters in other functions
function Show-MFAMethodsNames
{
    [enum]::GetNames([MFAMethods])
}
Export-ModuleMember -Function Show-MFAMethodsNames